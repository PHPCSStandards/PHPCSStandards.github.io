name: Publish wiki
on:
  push:
    branches:
      - 'main'
    paths:
      - wiki/**
      - .github/workflows/publish-wiki.yml
  # Do a dry-run (check, no deploy) for PRs.
  pull_request:
    paths:
      - wiki/**
      - .github/workflows/publish-wiki.yml
  # Allow running this workflow manually from the Actions tab.
  workflow_dispatch:
  # Allow this workflow to be triggered from outside.
  repository_dispatch:
    types:
      - 'phpcs-release'

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "publish-wiki"
  cancel-in-progress: false

jobs:
  publish-wiki:
    name: "Publish Wiki"
    if: github.repository == 'PHPCSStandards/PHP_CodeSniffer-documentation'

    runs-on: ubuntu-latest

    permissions:
      # Needed for the commit to the wiki.
      contents: write
      # Needed for the PR comment.
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 'latest'
          ini-values: error_reporting=-1, display_errors=On, log_errors_max_len=0
          tools: phpcs, phpcbf
          coverage: none

      # Make sure we've gotten the latest version from setup-php.
      - name: Retrieve latest release info
        uses: octokit/request-action@v2.x
        id: get_latest_release
        with:
          route: GET /repos/PHPCSStandards/PHP_CodeSniffer/releases/latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Grab latest tag name from API response
        id: latest_version
        run: |
          echo "TAG=${{ fromJson(steps.get_latest_release.outputs.data).tag_name }}" >> "$GITHUB_OUTPUT"

      - name: Grab the version
        id: phar_version
        # yamllint disable-line rule:line-length
        run: echo "VERSION=$(phpcs --version | grep --only-matching --max-count=1 --extended-regexp '\b[0-9]+(\.[0-9]+)+')" >> "$GITHUB_OUTPUT"

      - name: Fail the build if the PHAR is not the correct version
        if: ${{ steps.phar_version.outputs.VERSION != steps.latest_version.outputs.TAG }}
        run: exit 1

      # ############################
      # Prepare output snippets.
      # ############################

      - name: Create directory to place snippets in
        run: mkdir build/output-snippets

      - name: "Usage page: phpcs help"
        run: phpcs --report-width=110 --no-colors -h > build/output-snippets/phpcs-h.txt

      - name: "Fixing page: phpcbf help"
        run: phpbfs --report-width=110 --no-colors -h > build/output-snippets/phpcbf-h.txt



      # ############################
      # Update Wiki files.
      # ############################

      - name: Install DocToc table of contents generator
        run: npm install -g doctoc

      - name: Copy wiki files to temporary location
        shell: bash
        run: cp -v -a wiki _wiki

      - name: Update tables of contents
        run: doctoc ./_wiki/ --github --maxlevel 4 --update-only

      - name: Re-run tables of contents with different settings for specific file
        run: doctoc ./_wiki/Version-4.0-User-Upgrade-Guide.md --github --maxlevel 3 --update-only


      # ############################
      # Deploy.
      # ############################

      # Retention is normally 90 days, but this artifact is only to help with reviewing PRs,
      # especially when new output blocks are added or the (workflow) code for existing ones
      # is updated. All in all, no need to keep the artifact for more than a few days.
      - name: "[PR only] Upload the preprocessed wiki files as an artifact"
        if: ${{ github.event_name == 'pull_request' }}
        id: artifact
        uses: actions/upload-artifact@v4
        with:
          name: wiki-files
          path: ./_wiki
          if-no-files-found: error
          retention-days: 10

      - name: "[PR only] Post comment to review artifact if workflow was updated"
        if: ${{ github.event_name == 'pull_request' }}
        uses: mshick/add-pr-comment@v2
        with:
          # TODO: replace this with PAT
          repo-token: ${{ secrets.PHPCS_GITHUB_TOKEN }}
          message: |
            Thank you for this PR.
            A dry-run has been executed on your PR, executing all markdown pre-processing for the wiki files.

            Please review the resulting final markdown files via the [created artifact](${{ steps.artifact.outputs.artifact-url }}).
            This is especially important when adding new pages or updating auto-generated output blocks.

            _N.B.: the above link will automatically be updated when this PR is updated._

      - name: Check GitHub Git Operations status
        uses: crazy-max/ghaction-github-status@v4
        with:
          git_threshold: partial_outage

      - name: Deploy to wiki
        uses: Andrew-Chen-Wang/github-wiki-action@v4
        env:
          COMMIT_MSG: ${{ github.event.head_commit.message }}
        with:
          strategy: 'clone'
          path: '_wiki/'
          commit-message: ${{ env.COMMIT_MSG }}
          # repository: PHPCSStandards/PHP_CodeSniffer
          # token: ${{ secrets.PHPCS_GITHUB_TOKEN }}
          dry-run: ${{ github.event_name == 'pull_request' }}
